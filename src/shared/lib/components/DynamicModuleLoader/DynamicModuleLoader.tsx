import {FC, ReactNode, useEffect} from "react";import {loginReducer} from "features/AuthByUsername/model/slice/loginSlice";import { useDispatch, useStore } from "react-redux";import { ReduxStoreWithManager } from "app/providers/StoreProvider";import {Reducer} from "@reduxjs/toolkit";import {StateSchemaKeys} from "app/providers/StoreProvider/config/StateSchema";export type ReducersList = {    [name in StateSchemaKeys]?: Reducer}type typeReducersListEntry = [StateSchemaKeys, Reducer];interface DynamicModuleLoaderProps {    reducers: ReducersList;    removeAfterUnmount?: boolean;}export const DynamicModuleLoader: FC<DynamicModuleLoaderProps> = (props) => {    const {        children,        reducers,        removeAfterUnmount    } = props;    const dispatch = useDispatch();    const store = useStore() as ReduxStoreWithManager;    useEffect(() => {        Object.entries(reducers).forEach(([keyName, reducer]: typeReducersListEntry) => {            store.reducerManager.add(keyName, reducer);            dispatch({type: `@INIT ${keyName} reducer`});        })        return () => {            if (removeAfterUnmount) {                Object.entries(reducers).forEach(([keyName, reducer]: typeReducersListEntry) => {                    store.reducerManager.add(keyName, reducer);                    dispatch({type: `@REMOVE ${keyName} reducer`});                })            }        }    }, []);    return (     <>         {children}     </>    );};