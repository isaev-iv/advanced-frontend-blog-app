import {useTranslation} from "react-i18next";import {classNames} from "shared/lib/classNames/classNames";import cls from './LoginForm.module.scss'import {Input} from "shared/ui/Input/Input";import React, {memo, useCallback} from "react";import {Button, VariantButton} from "shared/ui/Button/Button";import {useDispatch, useSelector} from "react-redux";import {loginActions} from "../../model/slice/loginSlice";import {getLoginState} from "../../model/selectors/getLoginState/getLoginState";import {loginByUsername} from "../../model/services/loginByUsername/loginByUsername";import {Text, TextTheme} from "shared/ui/Text/Text";interface LoginFormProps {    className?: string;}export const LoginForm = memo((className: LoginFormProps) => {    const {t} = useTranslation();    const dispatch = useDispatch();    const {username, password, isLoading, error} = useSelector(getLoginState);    const onChangeUsername = useCallback((value) => {        dispatch(loginActions.setUsername(value));    }, [dispatch]);    const onChangePassword = useCallback((value) => {        dispatch(loginActions.setPassword(value));    }, [dispatch]);    const onLoginClick = useCallback(() => {        dispatch(loginByUsername({username, password}));    }, [dispatch, username, password]);    return (        <div className={classNames(cls.loginForm, {}, [])}>            <Text text={t("Форма авторизации")} theme={TextTheme.PRIMARY} />            {error && <Text text={t("Вы вели неверный логин и пароль")} theme={TextTheme.ERROR} />}            <Input                type="text"                placeholder={t('Введите логин')}                autoFocus                onChange={onChangeUsername}                value={username}            />            <Input                type="text"                placeholder={t('Введите пароль')}                onChange={onChangePassword}                value={password}            />            <Button                variant={VariantButton.OUTLINE}                className={classNames(cls.loginBtn, {}, [])}                onClick={onLoginClick}                disabled={isLoading}            >                {t('Войти')}            </Button>        </div>    );});